/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

#pragma once
#include <SchemaTypes.h>
#include <array>
#include <type_traits>

namespace chip {
namespace app {
namespace clusters {

namespace AccountLoginCluster {
constexpr ClusterId_t kClusterId = 0x050E;
enum CommandId
{
    kGetSetupPIN         = 0,
    kGetSetupPINResponse = 0,
    kLogin               = 1,
};

namespace GetSetupPIN {

enum FieldId
{
    kFieldIdtempAccountIdentifier = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdtempAccountIdentifier, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace GetSetupPINResponse {

enum FieldId
{
    kFieldIdsetupPIN = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdsetupPIN, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace Login {

enum FieldId
{
    kFieldIdtempAccountIdentifier = 0,
    kFieldIdsetupPIN              = 1,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdtempAccountIdentifier, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdsetupPIN, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 1, {} },
};
}

namespace ApplicationLauncherCluster {
constexpr ClusterId_t kClusterId = 0x050C;
enum CommandId
{
    kLaunchApp         = 0,
    kLaunchAppResponse = 0,
};

namespace LaunchApp {

enum FieldId
{
    kFieldIddata        = 0,
    kFieldIdapplication = 1,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIddata, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdapplication, BitFlags(/* TYPE WARNING: array array defaults to */ uint8_t *), kNone, (kClusterId << 32) | 1, {} },
};
}
namespace LaunchAppResponse {

enum FieldId
{
    kFieldIdstatus = 0,
    kFieldIddata   = 1,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdstatus, BitFlags(uint8_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIddata, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 1, {} },
};
}

namespace ContentLaunchCluster {
constexpr ClusterId_t kClusterId = 0x050A;
enum CommandId
{
    kLaunchContent         = 0,
    kLaunchContentResponse = 0,
    kLaunchURL             = 1,
    kLaunchURLResponse     = 1,
};

namespace LaunchContent {

enum FieldId
{
    kFieldIdautoPlay = 0,
    kFieldIddata     = 1,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdautoPlay, BitFlags(uint8_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIddata, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 1, {} },
};
}
namespace LaunchContentResponse {

enum FieldId
{
    kFieldIddata                = 0,
    kFieldIdcontentLaunchStatus = 1,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIddata, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdcontentLaunchStatus, BitFlags(uint8_t), kNone, (kClusterId << 32) | 1, {} },
};
}
namespace LaunchURL {

enum FieldId
{
    kFieldIdcontentURL    = 0,
    kFieldIddisplayString = 1,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdcontentURL, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIddisplayString, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 1, {} },
};
}
namespace LaunchURLResponse {

enum FieldId
{
    kFieldIddata                = 0,
    kFieldIdcontentLaunchStatus = 1,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIddata, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdcontentLaunchStatus, BitFlags(uint8_t), kNone, (kClusterId << 32) | 1, {} },
};
}

namespace DoorLockCluster {
constexpr ClusterId_t kClusterId = 0x0101;
enum CommandId
{
    kLockDoor                     = 0,
    kLockDoorResponse             = 0,
    kUnlockDoor                   = 1,
    kUnlockDoorResponse           = 1,
    kToggle                       = 2,
    kToggleResponse               = 2,
    kUnlockWithTimeout            = 3,
    kUnlockWithTimeoutResponse    = 3,
    kGetLogRecord                 = 4,
    kGetLogRecordResponse         = 4,
    kSetPin                       = 5,
    kSetPinResponse               = 5,
    kGetPin                       = 6,
    kGetPinResponse               = 6,
    kClearPin                     = 7,
    kClearPinResponse             = 7,
    kClearAllPins                 = 8,
    kClearAllPinsResponse         = 8,
    kSetUserStatus                = 9,
    kSetUserStatusResponse        = 9,
    kGetUserStatus                = 10,
    kGetUserStatusResponse        = 10,
    kSetWeekdaySchedule           = 11,
    kSetWeekdayScheduleResponse   = 11,
    kGetWeekdaySchedule           = 12,
    kGetWeekdayScheduleResponse   = 12,
    kClearWeekdaySchedule         = 13,
    kClearWeekdayScheduleResponse = 13,
    kSetYeardaySchedule           = 14,
    kSetYeardayScheduleResponse   = 14,
    kGetYeardaySchedule           = 15,
    kGetYeardayScheduleResponse   = 15,
    kClearYeardaySchedule         = 16,
    kClearYeardayScheduleResponse = 16,
    kSetHolidaySchedule           = 17,
    kSetHolidayScheduleResponse   = 17,
    kGetHolidaySchedule           = 18,
    kGetHolidayScheduleResponse   = 18,
    kClearHolidaySchedule         = 19,
    kClearHolidayScheduleResponse = 19,
    kSetUserType                  = 20,
    kSetUserTypeResponse          = 20,
    kGetUserType                  = 21,
    kGetUserTypeResponse          = 21,
    kSetRfid                      = 22,
    kSetRfidResponse              = 22,
    kGetRfid                      = 23,
    kGetRfidResponse              = 23,
    kClearRfid                    = 24,
    kClearRfidResponse            = 24,
    kClearAllRfids                = 25,
    kClearAllRfidsResponse        = 25,
    kOperationEventNotification   = 32,
    kProgrammingEventNotification = 33,
};

namespace LockDoor {

enum FieldId
{
    kFieldIdPIN = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdPIN, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace LockDoorResponse {

enum FieldId
{
    kFieldIdstatus = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdstatus, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace UnlockDoor {

enum FieldId
{
    kFieldIdPIN = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdPIN, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace UnlockDoorResponse {

enum FieldId
{
    kFieldIdstatus = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdstatus, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace Toggle {

enum FieldId
{
    kFieldIdpin = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdpin, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace ToggleResponse {

enum FieldId
{
    kFieldIdstatus = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdstatus, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace UnlockWithTimeout {

enum FieldId
{
    kFieldIdtimeoutInSeconds = 0,
    kFieldIdpin              = 1,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdtimeoutInSeconds, BitFlags(uint16_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdpin, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 1, {} },
};
}
namespace UnlockWithTimeoutResponse {

enum FieldId
{
    kFieldIdstatus = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdstatus, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace GetLogRecord {

enum FieldId
{
    kFieldIdlogIndex = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdlogIndex, BitFlags(uint16_t), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace GetLogRecordResponse {

enum FieldId
{
    kFieldIdlogEntryId         = 0,
    kFieldIdtimestamp          = 1,
    kFieldIdeventType          = 2,
    kFieldIdsource             = 3,
    kFieldIdeventIdOrAlarmCode = 4,
    kFieldIduserId             = 5,
    kFieldIdpin                = 6,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdlogEntryId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdtimestamp, BitFlags(TYPE_UINT32), kNone, (kClusterId << 32) | 1, {} },
    { kFieldIdeventType, BitFlags(uint8_t), kNone, (kClusterId << 32) | 2, {} },
    { kFieldIdsource, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 3, {} },
    { kFieldIdeventIdOrAlarmCode, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 4, {} },
    { kFieldIduserId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 5, {} },
    { kFieldIdpin, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 6, {} },
};
}
namespace SetPin {

enum FieldId
{
    kFieldIduserId     = 0,
    kFieldIduserStatus = 1,
    kFieldIduserType   = 2,
    kFieldIdpin        = 3,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIduserId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIduserStatus, BitFlags(uint8_t), kNone, (kClusterId << 32) | 1, {} },
    { kFieldIduserType, BitFlags(uint8_t), kNone, (kClusterId << 32) | 2, {} },
    { kFieldIdpin, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 3, {} },
};
}
namespace SetPinResponse {

enum FieldId
{
    kFieldIdstatus = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdstatus, BitFlags(uint8_t), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace GetPin {

enum FieldId
{
    kFieldIduserId = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIduserId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace GetPinResponse {

enum FieldId
{
    kFieldIduserId     = 0,
    kFieldIduserStatus = 1,
    kFieldIduserType   = 2,
    kFieldIdpin        = 3,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIduserId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIduserStatus, BitFlags(uint8_t), kNone, (kClusterId << 32) | 1, {} },
    { kFieldIduserType, BitFlags(uint8_t), kNone, (kClusterId << 32) | 2, {} },
    { kFieldIdpin, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 3, {} },
};
}
namespace ClearPin {

enum FieldId
{
    kFieldIduserId = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIduserId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace ClearPinResponse {

enum FieldId
{
    kFieldIdstatus = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdstatus, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace ClearAllPins {

enum FieldId
{
};

constexpr _FieldDescriptor _Schema[] = {};
}
namespace ClearAllPinsResponse {

enum FieldId
{
    kFieldIdstatus = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdstatus, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace SetUserStatus {

enum FieldId
{
    kFieldIduserId     = 0,
    kFieldIduserStatus = 1,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIduserId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIduserStatus, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 1, {} },
};
}
namespace SetUserStatusResponse {

enum FieldId
{
    kFieldIdstatus = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdstatus, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace GetUserStatus {

enum FieldId
{
    kFieldIduserId = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIduserId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace GetUserStatusResponse {

enum FieldId
{
    kFieldIduserId = 0,
    kFieldIdstatus = 1,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIduserId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdstatus, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 1, {} },
};
}
namespace SetWeekdaySchedule {

enum FieldId
{
    kFieldIdscheduleId  = 0,
    kFieldIduserId      = 1,
    kFieldIddaysMask    = 2,
    kFieldIdstartHour   = 3,
    kFieldIdstartMinute = 4,
    kFieldIdendHour     = 5,
    kFieldIdendMinute   = 6,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdscheduleId, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIduserId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 1, {} },
    { kFieldIddaysMask, BitFlags(uint8_t), kNone, (kClusterId << 32) | 2, {} },
    { kFieldIdstartHour, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 3, {} },
    { kFieldIdstartMinute, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 4, {} },
    { kFieldIdendHour, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 5, {} },
    { kFieldIdendMinute, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 6, {} },
};
}
namespace SetWeekdayScheduleResponse {

enum FieldId
{
    kFieldIdstatus = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdstatus, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace GetWeekdaySchedule {

enum FieldId
{
    kFieldIdscheduleId = 0,
    kFieldIduserId     = 1,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdscheduleId, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIduserId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 1, {} },
};
}
namespace GetWeekdayScheduleResponse {

enum FieldId
{
    kFieldIdscheduleId  = 0,
    kFieldIduserId      = 1,
    kFieldIdstatus      = 2,
    kFieldIddaysMask    = 3,
    kFieldIdstartHour   = 4,
    kFieldIdstartMinute = 5,
    kFieldIdendHour     = 6,
    kFieldIdendMinute   = 7,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdscheduleId, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIduserId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 1, {} },
    { kFieldIdstatus, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 2, {} },
    { kFieldIddaysMask, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 3, {} },
    { kFieldIdstartHour, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 4, {} },
    { kFieldIdstartMinute, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 5, {} },
    { kFieldIdendHour, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 6, {} },
    { kFieldIdendMinute, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 7, {} },
};
}
namespace ClearWeekdaySchedule {

enum FieldId
{
    kFieldIdscheduleId = 0,
    kFieldIduserId     = 1,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdscheduleId, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIduserId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 1, {} },
};
}
namespace ClearWeekdayScheduleResponse {

enum FieldId
{
    kFieldIdstatus = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdstatus, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace SetYeardaySchedule {

enum FieldId
{
    kFieldIdscheduleId     = 0,
    kFieldIduserId         = 1,
    kFieldIdlocalStartTime = 2,
    kFieldIdlocalEndTime   = 3,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdscheduleId, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIduserId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 1, {} },
    { kFieldIdlocalStartTime, BitFlags(TYPE_UINT32), kNone, (kClusterId << 32) | 2, {} },
    { kFieldIdlocalEndTime, BitFlags(TYPE_UINT32), kNone, (kClusterId << 32) | 3, {} },
};
}
namespace SetYeardayScheduleResponse {

enum FieldId
{
    kFieldIdstatus = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdstatus, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace GetYeardaySchedule {

enum FieldId
{
    kFieldIdscheduleId = 0,
    kFieldIduserId     = 1,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdscheduleId, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIduserId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 1, {} },
};
}
namespace GetYeardayScheduleResponse {

enum FieldId
{
    kFieldIdscheduleId     = 0,
    kFieldIduserId         = 1,
    kFieldIdstatus         = 2,
    kFieldIdlocalStartTime = 3,
    kFieldIdlocalEndTime   = 4,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdscheduleId, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIduserId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 1, {} },
    { kFieldIdstatus, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 2, {} },
    { kFieldIdlocalStartTime, BitFlags(TYPE_UINT32), kNone, (kClusterId << 32) | 3, {} },
    { kFieldIdlocalEndTime, BitFlags(TYPE_UINT32), kNone, (kClusterId << 32) | 4, {} },
};
}
namespace ClearYeardaySchedule {

enum FieldId
{
    kFieldIdscheduleId = 0,
    kFieldIduserId     = 1,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdscheduleId, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIduserId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 1, {} },
};
}
namespace ClearYeardayScheduleResponse {

enum FieldId
{
    kFieldIdstatus = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdstatus, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace SetHolidaySchedule {

enum FieldId
{
    kFieldIdscheduleId                 = 0,
    kFieldIdlocalStartTime             = 1,
    kFieldIdlocalEndTime               = 2,
    kFieldIdoperatingModeDuringHoliday = 3,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdscheduleId, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdlocalStartTime, BitFlags(TYPE_UINT32), kNone, (kClusterId << 32) | 1, {} },
    { kFieldIdlocalEndTime, BitFlags(TYPE_UINT32), kNone, (kClusterId << 32) | 2, {} },
    { kFieldIdoperatingModeDuringHoliday, BitFlags(uint8_t), kNone, (kClusterId << 32) | 3, {} },
};
}
namespace SetHolidayScheduleResponse {

enum FieldId
{
    kFieldIdstatus = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdstatus, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace GetHolidaySchedule {

enum FieldId
{
    kFieldIdscheduleId = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdscheduleId, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace GetHolidayScheduleResponse {

enum FieldId
{
    kFieldIdscheduleId                 = 0,
    kFieldIdstatus                     = 1,
    kFieldIdlocalStartTime             = 2,
    kFieldIdlocalEndTime               = 3,
    kFieldIdoperatingModeDuringHoliday = 4,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdscheduleId, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdstatus, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 1, {} },
    { kFieldIdlocalStartTime, BitFlags(TYPE_UINT32), kNone, (kClusterId << 32) | 2, {} },
    { kFieldIdlocalEndTime, BitFlags(TYPE_UINT32), kNone, (kClusterId << 32) | 3, {} },
    { kFieldIdoperatingModeDuringHoliday, BitFlags(uint8_t), kNone, (kClusterId << 32) | 4, {} },
};
}
namespace ClearHolidaySchedule {

enum FieldId
{
    kFieldIdscheduleId = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdscheduleId, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace ClearHolidayScheduleResponse {

enum FieldId
{
    kFieldIdstatus = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdstatus, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace SetUserType {

enum FieldId
{
    kFieldIduserId   = 0,
    kFieldIduserType = 1,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIduserId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIduserType, BitFlags(uint8_t), kNone, (kClusterId << 32) | 1, {} },
};
}
namespace SetUserTypeResponse {

enum FieldId
{
    kFieldIdstatus = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdstatus, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace GetUserType {

enum FieldId
{
    kFieldIduserId = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIduserId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace GetUserTypeResponse {

enum FieldId
{
    kFieldIduserId   = 0,
    kFieldIduserType = 1,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIduserId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIduserType, BitFlags(uint8_t), kNone, (kClusterId << 32) | 1, {} },
};
}
namespace SetRfid {

enum FieldId
{
    kFieldIduserId     = 0,
    kFieldIduserStatus = 1,
    kFieldIduserType   = 2,
    kFieldIdid         = 3,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIduserId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIduserStatus, BitFlags(uint8_t), kNone, (kClusterId << 32) | 1, {} },
    { kFieldIduserType, BitFlags(uint8_t), kNone, (kClusterId << 32) | 2, {} },
    { kFieldIdid, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 3, {} },
};
}
namespace SetRfidResponse {

enum FieldId
{
    kFieldIdstatus = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdstatus, BitFlags(uint8_t), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace GetRfid {

enum FieldId
{
    kFieldIduserId = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIduserId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace GetRfidResponse {

enum FieldId
{
    kFieldIduserId     = 0,
    kFieldIduserStatus = 1,
    kFieldIduserType   = 2,
    kFieldIdrfid       = 3,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIduserId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIduserStatus, BitFlags(uint8_t), kNone, (kClusterId << 32) | 1, {} },
    { kFieldIduserType, BitFlags(uint8_t), kNone, (kClusterId << 32) | 2, {} },
    { kFieldIdrfid, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 3, {} },
};
}
namespace ClearRfid {

enum FieldId
{
    kFieldIduserId = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIduserId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace ClearRfidResponse {

enum FieldId
{
    kFieldIdstatus = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdstatus, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace ClearAllRfids {

enum FieldId
{
};

constexpr _FieldDescriptor _Schema[] = {};
}
namespace ClearAllRfidsResponse {

enum FieldId
{
    kFieldIdstatus = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdstatus, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace OperationEventNotification {

enum FieldId
{
    kFieldIdsource    = 0,
    kFieldIdeventCode = 1,
    kFieldIduserId    = 2,
    kFieldIdpin       = 3,
    kFieldIdtimeStamp = 4,
    kFieldIddata      = 5,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdsource, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdeventCode, BitFlags(uint8_t), kNone, (kClusterId << 32) | 1, {} },
    { kFieldIduserId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 2, {} },
    { kFieldIdpin, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 3, {} },
    { kFieldIdtimeStamp, BitFlags(TYPE_UINT32), kNone, (kClusterId << 32) | 4, {} },
    { kFieldIddata, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 5, {} },
};
}
namespace ProgrammingEventNotification {

enum FieldId
{
    kFieldIdsource     = 0,
    kFieldIdeventCode  = 1,
    kFieldIduserId     = 2,
    kFieldIdpin        = 3,
    kFieldIduserType   = 4,
    kFieldIduserStatus = 5,
    kFieldIdtimeStamp  = 6,
    kFieldIddata       = 7,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdsource, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdeventCode, BitFlags(uint8_t), kNone, (kClusterId << 32) | 1, {} },
    { kFieldIduserId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 2, {} },
    { kFieldIdpin, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 3, {} },
    { kFieldIduserType, BitFlags(uint8_t), kNone, (kClusterId << 32) | 4, {} },
    { kFieldIduserStatus, BitFlags(uint8_t), kNone, (kClusterId << 32) | 5, {} },
    { kFieldIdtimeStamp, BitFlags(TYPE_UINT32), kNone, (kClusterId << 32) | 6, {} },
    { kFieldIddata, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 7, {} },
};
}

namespace GeneralCommissioningCluster {
constexpr ClusterId_t kClusterId = 0x0030;
enum CommandId
{
    kArmFailSafe                   = 0,
    kArmFailSafeResponse           = 1,
    kSetRegulatoryConfig           = 2,
    kSetRegulatoryConfigResponse   = 3,
    kCommissioningComplete         = 4,
    kCommissioningCompleteResponse = 5,
};

namespace ArmFailSafe {

enum FieldId
{
    kFieldIdexpiryLengthSeconds = 0,
    kFieldIdbreadcrumb          = 1,
    kFieldIdtimeoutMs           = 2,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdexpiryLengthSeconds, BitFlags(uint16_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdbreadcrumb, BitFlags(TYPE_UINT64), kNone, (kClusterId << 32) | 1, {} },
    { kFieldIdtimeoutMs, BitFlags(TYPE_UINT32), kNone, (kClusterId << 32) | 2, {} },
};
}
namespace ArmFailSafeResponse {

enum FieldId
{
    kFieldIderrorCode = 0,
    kFieldIddebugText = 1,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIderrorCode, BitFlags(uint8_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIddebugText, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 1, {} },
};
}
namespace SetRegulatoryConfig {

enum FieldId
{
    kFieldIdlocation    = 0,
    kFieldIdcountryCode = 1,
    kFieldIdbreadcrumb  = 2,
    kFieldIdtimeoutMs   = 3,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdlocation, BitFlags(uint8_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdcountryCode, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 1, {} },
    { kFieldIdbreadcrumb, BitFlags(TYPE_UINT64), kNone, (kClusterId << 32) | 2, {} },
    { kFieldIdtimeoutMs, BitFlags(TYPE_UINT32), kNone, (kClusterId << 32) | 3, {} },
};
}
namespace SetRegulatoryConfigResponse {

enum FieldId
{
    kFieldIderrorCode = 0,
    kFieldIddebugText = 1,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIderrorCode, BitFlags(uint8_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIddebugText, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 1, {} },
};
}
namespace CommissioningComplete {

enum FieldId
{
};

constexpr _FieldDescriptor _Schema[] = {};
}
namespace CommissioningCompleteResponse {

enum FieldId
{
    kFieldIderrorCode = 0,
    kFieldIddebugText = 1,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIderrorCode, BitFlags(uint8_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIddebugText, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 1, {} },
};
}

namespace GroupsCluster {
constexpr ClusterId_t kClusterId = 0x0004;
enum CommandId
{
    kAddGroup                   = 0,
    kAddGroupResponse           = 0,
    kViewGroup                  = 1,
    kViewGroupResponse          = 1,
    kGetGroupMembership         = 2,
    kGetGroupMembershipResponse = 2,
    kRemoveGroup                = 3,
    kRemoveGroupResponse        = 3,
    kRemoveAllGroups            = 4,
    kAddGroupIfIdentifying      = 5,
};

namespace AddGroup {

enum FieldId
{
    kFieldIdgroupId   = 0,
    kFieldIdgroupName = 1,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdgroupId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdgroupName, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 1, {} },
};
}
namespace AddGroupResponse {

enum FieldId
{
    kFieldIdstatus  = 0,
    kFieldIdgroupId = 1,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdstatus, BitFlags(uint8_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdgroupId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 1, {} },
};
}
namespace ViewGroup {

enum FieldId
{
    kFieldIdgroupId = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdgroupId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace ViewGroupResponse {

enum FieldId
{
    kFieldIdstatus    = 0,
    kFieldIdgroupId   = 1,
    kFieldIdgroupName = 2,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdstatus, BitFlags(uint8_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdgroupId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 1, {} },
    { kFieldIdgroupName, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 2, {} },
};
}
namespace GetGroupMembership {

enum FieldId
{
    kFieldIdgroupCount = 0,
    kFieldIdgroupList  = 1,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdgroupCount, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdgroupList, BitFlags(/* TYPE WARNING: array array defaults to */ uint8_t *), kNone, (kClusterId << 32) | 1, {} },
};
}
namespace GetGroupMembershipResponse {

enum FieldId
{
    kFieldIdcapacity   = 0,
    kFieldIdgroupCount = 1,
    kFieldIdgroupList  = 2,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdcapacity, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdgroupCount, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 1, {} },
    { kFieldIdgroupList, BitFlags(/* TYPE WARNING: array array defaults to */ uint8_t *), kNone, (kClusterId << 32) | 2, {} },
};
}
namespace RemoveGroup {

enum FieldId
{
    kFieldIdgroupId = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdgroupId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace RemoveGroupResponse {

enum FieldId
{
    kFieldIdstatus  = 0,
    kFieldIdgroupId = 1,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdstatus, BitFlags(uint8_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdgroupId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 1, {} },
};
}
namespace RemoveAllGroups {

enum FieldId
{
};

constexpr _FieldDescriptor _Schema[] = {};
}
namespace AddGroupIfIdentifying {

enum FieldId
{
    kFieldIdgroupId   = 0,
    kFieldIdgroupName = 1,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdgroupId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdgroupName, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 1, {} },
};
}

namespace IdentifyCluster {
constexpr ClusterId_t kClusterId = 0x0003;
enum CommandId
{
    kIdentify              = 0,
    kIdentifyQueryResponse = 0,
    kIdentifyQuery         = 1,
    kEZModeInvoke          = 2,
    kUpdateCommissionState = 3,
    kTriggerEffect         = 64,
};

namespace Identify {

enum FieldId
{
    kFieldIdidentifyTime = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdidentifyTime, BitFlags(uint16_t), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace IdentifyQueryResponse {

enum FieldId
{
    kFieldIdtimeout = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdtimeout, BitFlags(uint16_t), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace IdentifyQuery {

enum FieldId
{
};

constexpr _FieldDescriptor _Schema[] = {};
}
namespace EZModeInvoke {

enum FieldId
{
    kFieldIdaction = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdaction, BitFlags(uint8_t), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace UpdateCommissionState {

enum FieldId
{
    kFieldIdaction              = 0,
    kFieldIdcommissionStateMask = 1,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdaction, BitFlags(uint8_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdcommissionStateMask, BitFlags(uint8_t), kNone, (kClusterId << 32) | 1, {} },
};
}
namespace TriggerEffect {

enum FieldId
{
    kFieldIdeffectId      = 0,
    kFieldIdeffectVariant = 1,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdeffectId, BitFlags(uint8_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdeffectVariant, BitFlags(uint8_t), kNone, (kClusterId << 32) | 1, {} },
};
}

namespace KeypadInputCluster {
constexpr ClusterId_t kClusterId = 0x0509;
enum CommandId
{
    kSendKey         = 0,
    kSendKeyResponse = 0,
};

namespace SendKey {

enum FieldId
{
    kFieldIdkeyCode = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdkeyCode, BitFlags(uint8_t), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace SendKeyResponse {

enum FieldId
{
    kFieldIdstatus = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdstatus, BitFlags(uint8_t), kNone, (kClusterId << 32) | 0, {} },
};
}

namespace MediaPlaybackCluster {
constexpr ClusterId_t kClusterId = 0x0506;
enum CommandId
{
    kMediaPlay                 = 0,
    kMediaPlayResponse         = 0,
    kMediaPause                = 1,
    kMediaPauseResponse        = 1,
    kMediaStop                 = 2,
    kMediaStopResponse         = 2,
    kMediaStartOver            = 3,
    kMediaStartOverResponse    = 3,
    kMediaPrevious             = 4,
    kMediaPreviousResponse     = 4,
    kMediaNext                 = 5,
    kMediaNextResponse         = 5,
    kMediaRewind               = 6,
    kMediaRewindResponse       = 6,
    kMediaFastForward          = 7,
    kMediaFastForwardResponse  = 7,
    kMediaSkipForward          = 8,
    kMediaSkipForwardResponse  = 8,
    kMediaSkipBackward         = 9,
    kMediaSkipBackwardResponse = 9,
    kMediaSkipSeek             = 10,
    kMediaSkipSeekResponse     = 10,
};

namespace MediaPlay {

enum FieldId
{
};

constexpr _FieldDescriptor _Schema[] = {};
}
namespace MediaPlayResponse {

enum FieldId
{
    kFieldIdmediaPlaybackStatus = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdmediaPlaybackStatus, BitFlags(uint8_t), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace MediaPause {

enum FieldId
{
};

constexpr _FieldDescriptor _Schema[] = {};
}
namespace MediaPauseResponse {

enum FieldId
{
    kFieldIdmediaPlaybackStatus = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdmediaPlaybackStatus, BitFlags(uint8_t), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace MediaStop {

enum FieldId
{
};

constexpr _FieldDescriptor _Schema[] = {};
}
namespace MediaStopResponse {

enum FieldId
{
    kFieldIdmediaPlaybackStatus = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdmediaPlaybackStatus, BitFlags(uint8_t), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace MediaStartOver {

enum FieldId
{
};

constexpr _FieldDescriptor _Schema[] = {};
}
namespace MediaStartOverResponse {

enum FieldId
{
    kFieldIdmediaPlaybackStatus = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdmediaPlaybackStatus, BitFlags(uint8_t), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace MediaPrevious {

enum FieldId
{
};

constexpr _FieldDescriptor _Schema[] = {};
}
namespace MediaPreviousResponse {

enum FieldId
{
    kFieldIdmediaPlaybackStatus = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdmediaPlaybackStatus, BitFlags(uint8_t), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace MediaNext {

enum FieldId
{
};

constexpr _FieldDescriptor _Schema[] = {};
}
namespace MediaNextResponse {

enum FieldId
{
    kFieldIdmediaPlaybackStatus = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdmediaPlaybackStatus, BitFlags(uint8_t), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace MediaRewind {

enum FieldId
{
};

constexpr _FieldDescriptor _Schema[] = {};
}
namespace MediaRewindResponse {

enum FieldId
{
    kFieldIdmediaPlaybackStatus = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdmediaPlaybackStatus, BitFlags(uint8_t), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace MediaFastForward {

enum FieldId
{
};

constexpr _FieldDescriptor _Schema[] = {};
}
namespace MediaFastForwardResponse {

enum FieldId
{
    kFieldIdmediaPlaybackStatus = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdmediaPlaybackStatus, BitFlags(uint8_t), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace MediaSkipForward {

enum FieldId
{
    kFieldIddeltaPositionMilliseconds = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIddeltaPositionMilliseconds, BitFlags(TYPE_UINT64), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace MediaSkipForwardResponse {

enum FieldId
{
    kFieldIdmediaPlaybackStatus = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdmediaPlaybackStatus, BitFlags(uint8_t), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace MediaSkipBackward {

enum FieldId
{
    kFieldIddeltaPositionMilliseconds = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIddeltaPositionMilliseconds, BitFlags(TYPE_UINT64), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace MediaSkipBackwardResponse {

enum FieldId
{
    kFieldIdmediaPlaybackStatus = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdmediaPlaybackStatus, BitFlags(uint8_t), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace MediaSkipSeek {

enum FieldId
{
    kFieldIdposition = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdposition, BitFlags(TYPE_UINT64), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace MediaSkipSeekResponse {

enum FieldId
{
    kFieldIdmediaPlaybackStatus = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdmediaPlaybackStatus, BitFlags(uint8_t), kNone, (kClusterId << 32) | 0, {} },
};
}

namespace NetworkCommissioningCluster {
constexpr ClusterId_t kClusterId = 0x0031;
enum CommandId
{
    kScanNetworks                      = 0,
    kScanNetworksResponse              = 1,
    kAddWiFiNetwork                    = 2,
    kAddWiFiNetworkResponse            = 3,
    kUpdateWiFiNetwork                 = 4,
    kUpdateWiFiNetworkResponse         = 5,
    kAddThreadNetwork                  = 6,
    kAddThreadNetworkResponse          = 7,
    kUpdateThreadNetwork               = 8,
    kUpdateThreadNetworkResponse       = 9,
    kRemoveNetwork                     = 10,
    kRemoveNetworkResponse             = 11,
    kEnableNetwork                     = 12,
    kEnableNetworkResponse             = 13,
    kDisableNetwork                    = 14,
    kDisableNetworkResponse            = 15,
    kGetLastNetworkCommissioningResult = 16,
};

namespace ScanNetworks {

enum FieldId
{
    kFieldIdssid       = 0,
    kFieldIdbreadcrumb = 1,
    kFieldIdtimeoutMs  = 2,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdssid, BitFlags(TYPE_OCTSTR), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdbreadcrumb, BitFlags(TYPE_UINT64), kNone, (kClusterId << 32) | 1, {} },
    { kFieldIdtimeoutMs, BitFlags(TYPE_UINT32), kNone, (kClusterId << 32) | 2, {} },
};
}
namespace ScanNetworksResponse {

enum FieldId
{
    kFieldIderrorCode         = 0,
    kFieldIddebugText         = 1,
    kFieldIdwifiScanResults   = 2,
    kFieldIdthreadScanResults = 3,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIderrorCode, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIddebugText, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 1, {} },
    { kFieldIdwifiScanResults, BitFlags(/* TYPE WARNING: array array defaults to */ uint8_t *), kNone, (kClusterId << 32) | 2, {} },
    { kFieldIdthreadScanResults,
      BitFlags(/* TYPE WARNING: array array defaults to */ uint8_t *),
      kNone,
      (kClusterId << 32) | 3,
      {} },
};
}
namespace AddWiFiNetwork {

enum FieldId
{
    kFieldIdssid        = 0,
    kFieldIdcredentials = 1,
    kFieldIdbreadcrumb  = 2,
    kFieldIdtimeoutMs   = 3,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdssid, BitFlags(TYPE_OCTSTR), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdcredentials, BitFlags(TYPE_OCTSTR), kNone, (kClusterId << 32) | 1, {} },
    { kFieldIdbreadcrumb, BitFlags(TYPE_UINT64), kNone, (kClusterId << 32) | 2, {} },
    { kFieldIdtimeoutMs, BitFlags(TYPE_UINT32), kNone, (kClusterId << 32) | 3, {} },
};
}
namespace AddWiFiNetworkResponse {

enum FieldId
{
    kFieldIderrorCode = 0,
    kFieldIddebugText = 1,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIderrorCode, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIddebugText, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 1, {} },
};
}
namespace UpdateWiFiNetwork {

enum FieldId
{
    kFieldIdssid        = 0,
    kFieldIdcredentials = 1,
    kFieldIdbreadcrumb  = 2,
    kFieldIdtimeoutMs   = 3,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdssid, BitFlags(TYPE_OCTSTR), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdcredentials, BitFlags(TYPE_OCTSTR), kNone, (kClusterId << 32) | 1, {} },
    { kFieldIdbreadcrumb, BitFlags(TYPE_UINT64), kNone, (kClusterId << 32) | 2, {} },
    { kFieldIdtimeoutMs, BitFlags(TYPE_UINT32), kNone, (kClusterId << 32) | 3, {} },
};
}
namespace UpdateWiFiNetworkResponse {

enum FieldId
{
    kFieldIderrorCode = 0,
    kFieldIddebugText = 1,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIderrorCode, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIddebugText, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 1, {} },
};
}
namespace AddThreadNetwork {

enum FieldId
{
    kFieldIdoperationalDataset = 0,
    kFieldIdbreadcrumb         = 1,
    kFieldIdtimeoutMs          = 2,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdoperationalDataset, BitFlags(TYPE_OCTSTR), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdbreadcrumb, BitFlags(TYPE_UINT64), kNone, (kClusterId << 32) | 1, {} },
    { kFieldIdtimeoutMs, BitFlags(TYPE_UINT32), kNone, (kClusterId << 32) | 2, {} },
};
}
namespace AddThreadNetworkResponse {

enum FieldId
{
    kFieldIderrorCode = 0,
    kFieldIddebugText = 1,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIderrorCode, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIddebugText, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 1, {} },
};
}
namespace UpdateThreadNetwork {

enum FieldId
{
    kFieldIdoperationalDataset = 0,
    kFieldIdbreadcrumb         = 1,
    kFieldIdtimeoutMs          = 2,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdoperationalDataset, BitFlags(TYPE_OCTSTR), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdbreadcrumb, BitFlags(TYPE_UINT64), kNone, (kClusterId << 32) | 1, {} },
    { kFieldIdtimeoutMs, BitFlags(TYPE_UINT32), kNone, (kClusterId << 32) | 2, {} },
};
}
namespace UpdateThreadNetworkResponse {

enum FieldId
{
    kFieldIderrorCode = 0,
    kFieldIddebugText = 1,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIderrorCode, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIddebugText, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 1, {} },
};
}
namespace RemoveNetwork {

enum FieldId
{
    kFieldIdNetworkID  = 0,
    kFieldIdBreadcrumb = 1,
    kFieldIdTimeoutMs  = 2,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdNetworkID, BitFlags(TYPE_OCTSTR), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdBreadcrumb, BitFlags(TYPE_UINT64), kNone, (kClusterId << 32) | 1, {} },
    { kFieldIdTimeoutMs, BitFlags(TYPE_UINT32), kNone, (kClusterId << 32) | 2, {} },
};
}
namespace RemoveNetworkResponse {

enum FieldId
{
    kFieldIderrorCode = 0,
    kFieldIddebugText = 1,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIderrorCode, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIddebugText, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 1, {} },
};
}
namespace EnableNetwork {

enum FieldId
{
    kFieldIdnetworkID  = 0,
    kFieldIdbreadcrumb = 1,
    kFieldIdtimeoutMs  = 2,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdnetworkID, BitFlags(TYPE_OCTSTR), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdbreadcrumb, BitFlags(TYPE_UINT64), kNone, (kClusterId << 32) | 1, {} },
    { kFieldIdtimeoutMs, BitFlags(TYPE_UINT32), kNone, (kClusterId << 32) | 2, {} },
};
}
namespace EnableNetworkResponse {

enum FieldId
{
    kFieldIderrorCode = 0,
    kFieldIddebugText = 1,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIderrorCode, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIddebugText, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 1, {} },
};
}
namespace DisableNetwork {

enum FieldId
{
    kFieldIdnetworkID  = 0,
    kFieldIdbreadcrumb = 1,
    kFieldIdtimeoutMs  = 2,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdnetworkID, BitFlags(TYPE_OCTSTR), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdbreadcrumb, BitFlags(TYPE_UINT64), kNone, (kClusterId << 32) | 1, {} },
    { kFieldIdtimeoutMs, BitFlags(TYPE_UINT32), kNone, (kClusterId << 32) | 2, {} },
};
}
namespace DisableNetworkResponse {

enum FieldId
{
    kFieldIderrorCode = 0,
    kFieldIddebugText = 1,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIderrorCode, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIddebugText, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 1, {} },
};
}
namespace GetLastNetworkCommissioningResult {

enum FieldId
{
    kFieldIdtimeoutMs = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdtimeoutMs, BitFlags(TYPE_UINT32), kNone, (kClusterId << 32) | 0, {} },
};
}

namespace OperationalCredentialsCluster {
constexpr ClusterId_t kClusterId = 0x003E;
enum CommandId
{
    kSetFabric         = 0,
    kSetFabricResponse = 1,
    kOpCSRRequest      = 4,
    kOpCSRResponse     = 5,
    kAddOpCert         = 6,
    kOpCertResponse    = 8,
    kUpdateFabricLabel = 9,
    kRemoveFabric      = 10,
    kRemoveAllFabrics  = 11,
};

namespace SetFabric {

enum FieldId
{
    kFieldIdVendorId = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdVendorId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace SetFabricResponse {

enum FieldId
{
    kFieldIdFabricId = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdFabricId, BitFlags(chip::FabricId), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace OpCSRRequest {

enum FieldId
{
    kFieldIdCSRNonce = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdCSRNonce, BitFlags(TYPE_OCTSTR), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace OpCSRResponse {

enum FieldId
{
    kFieldIdCSR             = 0,
    kFieldIdCSRNonce        = 1,
    kFieldIdVendorReserved1 = 2,
    kFieldIdVendorReserved2 = 3,
    kFieldIdVendorReserved3 = 4,
    kFieldIdSignature       = 5,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdCSR, BitFlags(TYPE_OCTSTR), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdCSRNonce, BitFlags(TYPE_OCTSTR), kNone, (kClusterId << 32) | 1, {} },
    { kFieldIdVendorReserved1, BitFlags(TYPE_OCTSTR), kNone, (kClusterId << 32) | 2, {} },
    { kFieldIdVendorReserved2, BitFlags(TYPE_OCTSTR), kNone, (kClusterId << 32) | 3, {} },
    { kFieldIdVendorReserved3, BitFlags(TYPE_OCTSTR), kNone, (kClusterId << 32) | 4, {} },
    { kFieldIdSignature, BitFlags(TYPE_OCTSTR), kNone, (kClusterId << 32) | 5, {} },
};
}
namespace AddOpCert {

enum FieldId
{
    kFieldIdNOC            = 0,
    kFieldIdICACertificate = 1,
    kFieldIdIPKValue       = 2,
    kFieldIdCaseAdminNode  = 3,
    kFieldIdAdminVendorId  = 4,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdNOC, BitFlags(TYPE_OCTSTR), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdICACertificate, BitFlags(TYPE_OCTSTR), kNone, (kClusterId << 32) | 1, {} },
    { kFieldIdIPKValue, BitFlags(TYPE_OCTSTR), kNone, (kClusterId << 32) | 2, {} },
    { kFieldIdCaseAdminNode, BitFlags(chip::NodeId), kNone, (kClusterId << 32) | 3, {} },
    { kFieldIdAdminVendorId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 4, {} },
};
}
namespace OpCertResponse {

enum FieldId
{
    kFieldIdStatusCode  = 0,
    kFieldIdFabricIndex = 1,
    kFieldIdDebugText   = 2,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdStatusCode, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdFabricIndex, BitFlags(TYPE_UINT64), kNone, (kClusterId << 32) | 1, {} },
    { kFieldIdDebugText, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 2, {} },
};
}
namespace UpdateFabricLabel {

enum FieldId
{
    kFieldIdLabel = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdLabel, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace RemoveFabric {

enum FieldId
{
    kFieldIdFabricId = 0,
    kFieldIdNodeId   = 1,
    kFieldIdVendorId = 2,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdFabricId, BitFlags(chip::FabricId), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdNodeId, BitFlags(chip::NodeId), kNone, (kClusterId << 32) | 1, {} },
    { kFieldIdVendorId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 2, {} },
};
}
namespace RemoveAllFabrics {

enum FieldId
{
};

constexpr _FieldDescriptor _Schema[] = {};
}

namespace ScenesCluster {
constexpr ClusterId_t kClusterId = 0x0005;
enum CommandId
{
    kAddScene                   = 0,
    kAddSceneResponse           = 0,
    kViewScene                  = 1,
    kViewSceneResponse          = 1,
    kRemoveScene                = 2,
    kRemoveSceneResponse        = 2,
    kRemoveAllScenes            = 3,
    kRemoveAllScenesResponse    = 3,
    kStoreScene                 = 4,
    kStoreSceneResponse         = 4,
    kRecallScene                = 5,
    kGetSceneMembership         = 6,
    kGetSceneMembershipResponse = 6,
    kEnhancedAddScene           = 64,
    kEnhancedAddSceneResponse   = 64,
    kEnhancedViewScene          = 65,
    kEnhancedViewSceneResponse  = 65,
    kCopyScene                  = 66,
    kCopySceneResponse          = 66,
};

namespace AddScene {

enum FieldId
{
    kFieldIdgroupId            = 0,
    kFieldIdsceneId            = 1,
    kFieldIdtransitionTime     = 2,
    kFieldIdsceneName          = 3,
    kFieldIdextensionFieldSets = 4,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdgroupId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdsceneId, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 1, {} },
    { kFieldIdtransitionTime, BitFlags(uint16_t), kNone, (kClusterId << 32) | 2, {} },
    { kFieldIdsceneName, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 3, {} },
    { kFieldIdextensionFieldSets,
      BitFlags(/* TYPE WARNING: array array defaults to */ uint8_t *),
      kNone,
      (kClusterId << 32) | 4,
      {} },
};
}
namespace AddSceneResponse {

enum FieldId
{
    kFieldIdstatus  = 0,
    kFieldIdgroupId = 1,
    kFieldIdsceneId = 2,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdstatus, BitFlags(uint8_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdgroupId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 1, {} },
    { kFieldIdsceneId, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 2, {} },
};
}
namespace ViewScene {

enum FieldId
{
    kFieldIdgroupId = 0,
    kFieldIdsceneId = 1,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdgroupId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdsceneId, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 1, {} },
};
}
namespace ViewSceneResponse {

enum FieldId
{
    kFieldIdstatus             = 0,
    kFieldIdgroupId            = 1,
    kFieldIdsceneId            = 2,
    kFieldIdtransitionTime     = 3,
    kFieldIdsceneName          = 4,
    kFieldIdextensionFieldSets = 5,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdstatus, BitFlags(uint8_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdgroupId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 1, {} },
    { kFieldIdsceneId, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 2, {} },
    { kFieldIdtransitionTime, BitFlags(uint16_t), kNone, (kClusterId << 32) | 3, {} },
    { kFieldIdsceneName, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 4, {} },
    { kFieldIdextensionFieldSets,
      BitFlags(/* TYPE WARNING: array array defaults to */ uint8_t *),
      kNone,
      (kClusterId << 32) | 5,
      {} },
};
}
namespace RemoveScene {

enum FieldId
{
    kFieldIdgroupId = 0,
    kFieldIdsceneId = 1,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdgroupId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdsceneId, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 1, {} },
};
}
namespace RemoveSceneResponse {

enum FieldId
{
    kFieldIdstatus  = 0,
    kFieldIdgroupId = 1,
    kFieldIdsceneId = 2,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdstatus, BitFlags(uint8_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdgroupId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 1, {} },
    { kFieldIdsceneId, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 2, {} },
};
}
namespace RemoveAllScenes {

enum FieldId
{
    kFieldIdgroupId = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdgroupId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace RemoveAllScenesResponse {

enum FieldId
{
    kFieldIdstatus  = 0,
    kFieldIdgroupId = 1,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdstatus, BitFlags(uint8_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdgroupId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 1, {} },
};
}
namespace StoreScene {

enum FieldId
{
    kFieldIdgroupId = 0,
    kFieldIdsceneId = 1,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdgroupId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdsceneId, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 1, {} },
};
}
namespace StoreSceneResponse {

enum FieldId
{
    kFieldIdstatus  = 0,
    kFieldIdgroupId = 1,
    kFieldIdsceneId = 2,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdstatus, BitFlags(uint8_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdgroupId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 1, {} },
    { kFieldIdsceneId, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 2, {} },
};
}
namespace RecallScene {

enum FieldId
{
    kFieldIdgroupId        = 0,
    kFieldIdsceneId        = 1,
    kFieldIdtransitionTime = 2,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdgroupId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdsceneId, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 1, {} },
    { kFieldIdtransitionTime, BitFlags(uint16_t), kNone, (kClusterId << 32) | 2, {} },
};
}
namespace GetSceneMembership {

enum FieldId
{
    kFieldIdgroupId = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdgroupId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace GetSceneMembershipResponse {

enum FieldId
{
    kFieldIdstatus     = 0,
    kFieldIdcapacity   = 1,
    kFieldIdgroupId    = 2,
    kFieldIdsceneCount = 3,
    kFieldIdsceneList  = 4,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdstatus, BitFlags(uint8_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdcapacity, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 1, {} },
    { kFieldIdgroupId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 2, {} },
    { kFieldIdsceneCount, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 3, {} },
    { kFieldIdsceneList, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 4, {} },
};
}
namespace EnhancedAddScene {

enum FieldId
{
    kFieldIdgroupId            = 0,
    kFieldIdsceneId            = 1,
    kFieldIdtransitionTime     = 2,
    kFieldIdsceneName          = 3,
    kFieldIdextensionFieldSets = 4,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdgroupId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdsceneId, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 1, {} },
    { kFieldIdtransitionTime, BitFlags(uint16_t), kNone, (kClusterId << 32) | 2, {} },
    { kFieldIdsceneName, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 3, {} },
    { kFieldIdextensionFieldSets,
      BitFlags(/* TYPE WARNING: array array defaults to */ uint8_t *),
      kNone,
      (kClusterId << 32) | 4,
      {} },
};
}
namespace EnhancedAddSceneResponse {

enum FieldId
{
    kFieldIdstatus  = 0,
    kFieldIdgroupId = 1,
    kFieldIdsceneId = 2,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdstatus, BitFlags(uint8_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdgroupId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 1, {} },
    { kFieldIdsceneId, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 2, {} },
};
}
namespace EnhancedViewScene {

enum FieldId
{
    kFieldIdgroupId = 0,
    kFieldIdsceneId = 1,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdgroupId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdsceneId, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 1, {} },
};
}
namespace EnhancedViewSceneResponse {

enum FieldId
{
    kFieldIdstatus             = 0,
    kFieldIdgroupId            = 1,
    kFieldIdsceneId            = 2,
    kFieldIdtransitionTime     = 3,
    kFieldIdsceneName          = 4,
    kFieldIdextensionFieldSets = 5,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdstatus, BitFlags(uint8_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdgroupId, BitFlags(uint16_t), kNone, (kClusterId << 32) | 1, {} },
    { kFieldIdsceneId, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 2, {} },
    { kFieldIdtransitionTime, BitFlags(uint16_t), kNone, (kClusterId << 32) | 3, {} },
    { kFieldIdsceneName, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 4, {} },
    { kFieldIdextensionFieldSets,
      BitFlags(/* TYPE WARNING: array array defaults to */ uint8_t *),
      kNone,
      (kClusterId << 32) | 5,
      {} },
};
}
namespace CopyScene {

enum FieldId
{
    kFieldIdmode        = 0,
    kFieldIdgroupIdFrom = 1,
    kFieldIdsceneIdFrom = 2,
    kFieldIdgroupIdTo   = 3,
    kFieldIdsceneIdTo   = 4,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdmode, BitFlags(uint8_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdgroupIdFrom, BitFlags(uint16_t), kNone, (kClusterId << 32) | 1, {} },
    { kFieldIdsceneIdFrom, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 2, {} },
    { kFieldIdgroupIdTo, BitFlags(uint16_t), kNone, (kClusterId << 32) | 3, {} },
    { kFieldIdsceneIdTo, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 4, {} },
};
}
namespace CopySceneResponse {

enum FieldId
{
    kFieldIdstatus      = 0,
    kFieldIdgroupIdFrom = 1,
    kFieldIdsceneIdFrom = 2,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdstatus, BitFlags(uint8_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdgroupIdFrom, BitFlags(uint16_t), kNone, (kClusterId << 32) | 1, {} },
    { kFieldIdsceneIdFrom, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 2, {} },
};
}

namespace TvChannelCluster {
constexpr ClusterId_t kClusterId = 0x0504;
enum CommandId
{
    kChangeChannel         = 0,
    kChangeChannelResponse = 0,
    kChangeChannelByNumber = 1,
    kSkipChannel           = 2,
};

namespace ChangeChannel {

enum FieldId
{
    kFieldIdmatch = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdmatch, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace ChangeChannelResponse {

enum FieldId
{
    kFieldIdChannelMatch = 0,
    kFieldIdErrorType    = 1,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdChannelMatch, BitFlags(/* TYPE WARNING: array array defaults to */ uint8_t *), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdErrorType, BitFlags(uint8_t), kNone, (kClusterId << 32) | 1, {} },
};
}
namespace ChangeChannelByNumber {

enum FieldId
{
    kFieldIdmajorNumber = 0,
    kFieldIdminorNumber = 1,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdmajorNumber, BitFlags(uint16_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIdminorNumber, BitFlags(uint16_t), kNone, (kClusterId << 32) | 1, {} },
};
}
namespace SkipChannel {

enum FieldId
{
    kFieldIdCount = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdCount, BitFlags(uint16_t), kNone, (kClusterId << 32) | 0, {} },
};
}

namespace TargetNavigatorCluster {
constexpr ClusterId_t kClusterId = 0x0505;
enum CommandId
{
    kNavigateTarget         = 0,
    kNavigateTargetResponse = 0,
};

namespace NavigateTarget {

enum FieldId
{
    kFieldIdtarget = 0,
    kFieldIddata   = 1,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdtarget, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIddata, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 1, {} },
};
}
namespace NavigateTargetResponse {

enum FieldId
{
    kFieldIdstatus = 0,
    kFieldIddata   = 1,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdstatus, BitFlags(uint8_t), kNone, (kClusterId << 32) | 0, {} },
    { kFieldIddata, BitFlags(TYPE_STRING), kNone, (kClusterId << 32) | 1, {} },
};
}

namespace TestClusterCluster {
constexpr ClusterId_t kClusterId = 0x050F;
enum CommandId
{
    kTest                 = 0,
    kTestSpecificResponse = 0,
    kTestNotHandled       = 1,
    kTestSpecific         = 2,
};

namespace Test {

enum FieldId
{
};

constexpr _FieldDescriptor _Schema[] = {};
}
namespace TestSpecificResponse {

enum FieldId
{
    kFieldIdreturnValue = 0,
};

constexpr _FieldDescriptor _Schema[] = {
    { kFieldIdreturnValue, BitFlags(TYPE_UINT8), kNone, (kClusterId << 32) | 0, {} },
};
}
namespace TestNotHandled {

enum FieldId
{
};

constexpr _FieldDescriptor _Schema[] = {};
}
namespace TestSpecific {

enum FieldId
{
};

constexpr _FieldDescriptor _Schema[] = {};
}

} // namespace clusters
} // namespace app
} // namespace chip
