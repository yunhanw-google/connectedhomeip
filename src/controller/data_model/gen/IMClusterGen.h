/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

#pragma once
#include im - cluster - header.h
#include <array>
#include <type_traits>

namespace chip {
namespace app {
namespace clusters {

namespace AccountLoginCluster {
extern ClusterDescriptor ClusterDescriptor;
namespace GetSetupPIN {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t * tempAccountIdentifier;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace GetSetupPINResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t * setupPIN;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace Login {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t * tempAccountIdentifier;
    uint8_t * setupPIN;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}

namespace ApplicationLauncherCluster {
extern ClusterDescriptor ClusterDescriptor;
namespace LaunchApp {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t * data;
    /* TYPE WARNING: array array defaults to */ uint8_t * application;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace LaunchAppResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t status;
    uint8_t * data;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}

namespace ContentLaunchCluster {
extern ClusterDescriptor ClusterDescriptor;
namespace LaunchContent {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t autoPlay;
    uint8_t * data;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace LaunchContentResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t * data;
    uint8_t contentLaunchStatus;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace LaunchURL {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t * contentURL;
    uint8_t * displayString;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace LaunchURLResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t * data;
    uint8_t contentLaunchStatus;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}

namespace DoorLockCluster {
extern ClusterDescriptor ClusterDescriptor;
namespace LockDoor {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t * PIN;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace LockDoorResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t status;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace UnlockDoor {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t * PIN;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace UnlockDoorResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t status;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace Toggle {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t * pin;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace ToggleResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t status;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace UnlockWithTimeout {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint16_t timeoutInSeconds;
    uint8_t * pin;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace UnlockWithTimeoutResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t status;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace GetLogRecord {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint16_t logIndex;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace GetLogRecordResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint16_t logEntryId;
    uint32_t timestamp;
    uint8_t eventType;
    uint8_t source;
    uint8_t eventIdOrAlarmCode;
    uint16_t userId;
    uint8_t * pin;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace SetPin {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint16_t userId;
    uint8_t userStatus;
    uint8_t userType;
    uint8_t * pin;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace SetPinResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t status;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace GetPin {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint16_t userId;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace GetPinResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint16_t userId;
    uint8_t userStatus;
    uint8_t userType;
    uint8_t * pin;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace ClearPin {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint16_t userId;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace ClearPinResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t status;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace ClearAllPins {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace ClearAllPinsResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t status;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace SetUserStatus {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint16_t userId;
    uint8_t userStatus;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace SetUserStatusResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t status;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace GetUserStatus {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint16_t userId;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace GetUserStatusResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint16_t userId;
    uint8_t status;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace SetWeekdaySchedule {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t scheduleId;
    uint16_t userId;
    uint8_t daysMask;
    uint8_t startHour;
    uint8_t startMinute;
    uint8_t endHour;
    uint8_t endMinute;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace SetWeekdayScheduleResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t status;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace GetWeekdaySchedule {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t scheduleId;
    uint16_t userId;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace GetWeekdayScheduleResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t scheduleId;
    uint16_t userId;
    uint8_t status;
    uint8_t daysMask;
    uint8_t startHour;
    uint8_t startMinute;
    uint8_t endHour;
    uint8_t endMinute;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace ClearWeekdaySchedule {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t scheduleId;
    uint16_t userId;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace ClearWeekdayScheduleResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t status;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace SetYeardaySchedule {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t scheduleId;
    uint16_t userId;
    uint32_t localStartTime;
    uint32_t localEndTime;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace SetYeardayScheduleResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t status;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace GetYeardaySchedule {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t scheduleId;
    uint16_t userId;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace GetYeardayScheduleResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t scheduleId;
    uint16_t userId;
    uint8_t status;
    uint32_t localStartTime;
    uint32_t localEndTime;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace ClearYeardaySchedule {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t scheduleId;
    uint16_t userId;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace ClearYeardayScheduleResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t status;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace SetHolidaySchedule {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t scheduleId;
    uint32_t localStartTime;
    uint32_t localEndTime;
    uint8_t operatingModeDuringHoliday;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace SetHolidayScheduleResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t status;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace GetHolidaySchedule {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t scheduleId;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace GetHolidayScheduleResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t scheduleId;
    uint8_t status;
    uint32_t localStartTime;
    uint32_t localEndTime;
    uint8_t operatingModeDuringHoliday;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace ClearHolidaySchedule {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t scheduleId;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace ClearHolidayScheduleResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t status;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace SetUserType {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint16_t userId;
    uint8_t userType;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace SetUserTypeResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t status;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace GetUserType {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint16_t userId;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace GetUserTypeResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint16_t userId;
    uint8_t userType;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace SetRfid {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint16_t userId;
    uint8_t userStatus;
    uint8_t userType;
    uint8_t * id;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace SetRfidResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t status;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace GetRfid {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint16_t userId;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace GetRfidResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint16_t userId;
    uint8_t userStatus;
    uint8_t userType;
    uint8_t * rfid;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace ClearRfid {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint16_t userId;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace ClearRfidResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t status;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace ClearAllRfids {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace ClearAllRfidsResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t status;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace OperationEventNotification {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t source;
    uint8_t eventCode;
    uint16_t userId;
    uint8_t * pin;
    uint32_t timeStamp;
    uint8_t * data;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace ProgrammingEventNotification {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t source;
    uint8_t eventCode;
    uint16_t userId;
    uint8_t * pin;
    uint8_t userType;
    uint8_t userStatus;
    uint32_t timeStamp;
    uint8_t * data;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}

namespace GeneralCommissioningCluster {
extern ClusterDescriptor ClusterDescriptor;
namespace ArmFailSafe {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint16_t expiryLengthSeconds;
    uint64_t breadcrumb;
    uint32_t timeoutMs;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace ArmFailSafeResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t errorCode;
    uint8_t * debugText;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace SetRegulatoryConfig {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t location;
    uint8_t * countryCode;
    uint64_t breadcrumb;
    uint32_t timeoutMs;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace SetRegulatoryConfigResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t errorCode;
    uint8_t * debugText;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace CommissioningComplete {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace CommissioningCompleteResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t errorCode;
    uint8_t * debugText;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}

namespace GroupsCluster {
extern ClusterDescriptor ClusterDescriptor;
namespace AddGroup {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint16_t groupId;
    uint8_t * groupName;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace AddGroupResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t status;
    uint16_t groupId;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace ViewGroup {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint16_t groupId;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace ViewGroupResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t status;
    uint16_t groupId;
    uint8_t * groupName;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace GetGroupMembership {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t groupCount;
    /* TYPE WARNING: array array defaults to */ uint8_t * groupList;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace GetGroupMembershipResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t capacity;
    uint8_t groupCount;
    /* TYPE WARNING: array array defaults to */ uint8_t * groupList;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace RemoveGroup {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint16_t groupId;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace RemoveGroupResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t status;
    uint16_t groupId;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace RemoveAllGroups {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace AddGroupIfIdentifying {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint16_t groupId;
    uint8_t * groupName;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}

namespace IdentifyCluster {
extern ClusterDescriptor ClusterDescriptor;
namespace Identify {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint16_t identifyTime;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace IdentifyQueryResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint16_t timeout;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace IdentifyQuery {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace EZModeInvoke {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t action;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace UpdateCommissionState {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t action;
    uint8_t commissionStateMask;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace TriggerEffect {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t effectId;
    uint8_t effectVariant;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}

namespace KeypadInputCluster {
extern ClusterDescriptor ClusterDescriptor;
namespace SendKey {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t keyCode;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace SendKeyResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t status;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}

namespace MediaPlaybackCluster {
extern ClusterDescriptor ClusterDescriptor;
namespace MediaPlay {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace MediaPlayResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t mediaPlaybackStatus;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace MediaPause {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace MediaPauseResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t mediaPlaybackStatus;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace MediaStop {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace MediaStopResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t mediaPlaybackStatus;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace MediaStartOver {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace MediaStartOverResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t mediaPlaybackStatus;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace MediaPrevious {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace MediaPreviousResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t mediaPlaybackStatus;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace MediaNext {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace MediaNextResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t mediaPlaybackStatus;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace MediaRewind {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace MediaRewindResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t mediaPlaybackStatus;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace MediaFastForward {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace MediaFastForwardResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t mediaPlaybackStatus;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace MediaSkipForward {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint64_t deltaPositionMilliseconds;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace MediaSkipForwardResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t mediaPlaybackStatus;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace MediaSkipBackward {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint64_t deltaPositionMilliseconds;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace MediaSkipBackwardResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t mediaPlaybackStatus;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace MediaSkipSeek {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint64_t position;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace MediaSkipSeekResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t mediaPlaybackStatus;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}

namespace NetworkCommissioningCluster {
extern ClusterDescriptor ClusterDescriptor;
namespace ScanNetworks {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    chip::ByteSpan ssid;
    uint64_t breadcrumb;
    uint32_t timeoutMs;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace ScanNetworksResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t errorCode;
    uint8_t * debugText;
    /* TYPE WARNING: array array defaults to */ uint8_t * wifiScanResults;
    /* TYPE WARNING: array array defaults to */ uint8_t * threadScanResults;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace AddWiFiNetwork {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    chip::ByteSpan ssid;
    chip::ByteSpan credentials;
    uint64_t breadcrumb;
    uint32_t timeoutMs;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace AddWiFiNetworkResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t errorCode;
    uint8_t * debugText;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace UpdateWiFiNetwork {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    chip::ByteSpan ssid;
    chip::ByteSpan credentials;
    uint64_t breadcrumb;
    uint32_t timeoutMs;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace UpdateWiFiNetworkResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t errorCode;
    uint8_t * debugText;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace AddThreadNetwork {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    chip::ByteSpan operationalDataset;
    uint64_t breadcrumb;
    uint32_t timeoutMs;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace AddThreadNetworkResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t errorCode;
    uint8_t * debugText;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace UpdateThreadNetwork {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    chip::ByteSpan operationalDataset;
    uint64_t breadcrumb;
    uint32_t timeoutMs;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace UpdateThreadNetworkResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t errorCode;
    uint8_t * debugText;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace RemoveNetwork {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    chip::ByteSpan NetworkID;
    uint64_t Breadcrumb;
    uint32_t TimeoutMs;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace RemoveNetworkResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t errorCode;
    uint8_t * debugText;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace EnableNetwork {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    chip::ByteSpan networkID;
    uint64_t breadcrumb;
    uint32_t timeoutMs;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace EnableNetworkResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t errorCode;
    uint8_t * debugText;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace DisableNetwork {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    chip::ByteSpan networkID;
    uint64_t breadcrumb;
    uint32_t timeoutMs;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace DisableNetworkResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t errorCode;
    uint8_t * debugText;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace GetLastNetworkCommissioningResult {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint32_t timeoutMs;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}

namespace OperationalCredentialsCluster {
extern ClusterDescriptor ClusterDescriptor;
namespace SetFabric {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint16_t VendorId;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace SetFabricResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    chip::FabricId FabricId;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace OpCSRRequest {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    chip::ByteSpan CSRNonce;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace OpCSRResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    chip::ByteSpan CSR;
    chip::ByteSpan CSRNonce;
    chip::ByteSpan VendorReserved1;
    chip::ByteSpan VendorReserved2;
    chip::ByteSpan VendorReserved3;
    chip::ByteSpan Signature;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace AddOpCert {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    chip::ByteSpan NOC;
    chip::ByteSpan ICACertificate;
    chip::ByteSpan IPKValue;
    chip::NodeId CaseAdminNode;
    uint16_t AdminVendorId;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace OpCertResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t StatusCode;
    uint64_t FabricIndex;
    uint8_t * DebugText;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace UpdateFabricLabel {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t * Label;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace RemoveFabric {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    chip::FabricId FabricId;
    chip::NodeId NodeId;
    uint16_t VendorId;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace RemoveAllFabrics {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}

namespace ScenesCluster {
extern ClusterDescriptor ClusterDescriptor;
namespace AddScene {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint16_t groupId;
    uint8_t sceneId;
    uint16_t transitionTime;
    uint8_t * sceneName;
    /* TYPE WARNING: array array defaults to */ uint8_t * extensionFieldSets;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace AddSceneResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t status;
    uint16_t groupId;
    uint8_t sceneId;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace ViewScene {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint16_t groupId;
    uint8_t sceneId;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace ViewSceneResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t status;
    uint16_t groupId;
    uint8_t sceneId;
    uint16_t transitionTime;
    uint8_t * sceneName;
    /* TYPE WARNING: array array defaults to */ uint8_t * extensionFieldSets;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace RemoveScene {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint16_t groupId;
    uint8_t sceneId;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace RemoveSceneResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t status;
    uint16_t groupId;
    uint8_t sceneId;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace RemoveAllScenes {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint16_t groupId;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace RemoveAllScenesResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t status;
    uint16_t groupId;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace StoreScene {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint16_t groupId;
    uint8_t sceneId;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace StoreSceneResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t status;
    uint16_t groupId;
    uint8_t sceneId;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace RecallScene {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint16_t groupId;
    uint8_t sceneId;
    uint16_t transitionTime;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace GetSceneMembership {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint16_t groupId;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace GetSceneMembershipResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t status;
    uint8_t capacity;
    uint16_t groupId;
    uint8_t sceneCount;
    /* TYPE WARNING: array array defaults to */ uint8_t * sceneList;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace EnhancedAddScene {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint16_t groupId;
    uint8_t sceneId;
    uint16_t transitionTime;
    uint8_t * sceneName;
    /* TYPE WARNING: array array defaults to */ uint8_t * extensionFieldSets;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace EnhancedAddSceneResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t status;
    uint16_t groupId;
    uint8_t sceneId;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace EnhancedViewScene {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint16_t groupId;
    uint8_t sceneId;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace EnhancedViewSceneResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t status;
    uint16_t groupId;
    uint8_t sceneId;
    uint16_t transitionTime;
    uint8_t * sceneName;
    /* TYPE WARNING: array array defaults to */ uint8_t * extensionFieldSets;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace CopyScene {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t mode;
    uint16_t groupIdFrom;
    uint8_t sceneIdFrom;
    uint16_t groupIdTo;
    uint8_t sceneIdTo;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace CopySceneResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t status;
    uint16_t groupIdFrom;
    uint8_t sceneIdFrom;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}

namespace TvChannelCluster {
extern ClusterDescriptor ClusterDescriptor;
namespace ChangeChannel {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t * match;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace ChangeChannelResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    /* TYPE WARNING: array array defaults to */ uint8_t * ChannelMatch;
    uint8_t ErrorType;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace ChangeChannelByNumber {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint16_t majorNumber;
    uint16_t minorNumber;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace SkipChannel {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint16_t Count;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}

namespace TargetNavigatorCluster {
extern ClusterDescriptor ClusterDescriptor;
namespace NavigateTarget {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t target;
    uint8_t * data;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace NavigateTargetResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t status;
    uint8_t * data;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}

namespace TestClusterCluster {
extern ClusterDescriptor ClusterDescriptor;
namespace Test {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace TestSpecificResponse {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    uint8_t returnValue;
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace TestNotHandled {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}
namespace TestSpecific {
constexpr int NumImplementedFields = GetNumImplementedFields(_Schema);
extern const StructDescriptor<NumImplementedFields> Descriptor;

class Type
{
public:
    static const StructDescriptor<NumImplementedFields> & mDescriptor;
};
}

} // namespace clusters
} // namespace app
} // namespace chip
