/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

#pragma once
#include im - cluster - Gen.h
#include <SchemaTypes.h>
#include <array>
#include <type_traits>

namespace chip {
namespace app {
namespace clusters {
namespace AccountLoginCluster {
struct ClusterDescriptor ClusterDescriptor = { .ClusterId = kClusterId };
namespace GetSetupPINCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, tempAccountIdentifier), sizeof(uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace GetSetupPINResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, setupPIN), sizeof(uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace LoginCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, tempAccountIdentifier), sizeof(uint8_t *) };
    r[i++]     = { offsetof(class Type, setupPIN), sizeof(uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}

namespace ApplicationLauncherCluster {
struct ClusterDescriptor ClusterDescriptor = { .ClusterId = kClusterId };
namespace LaunchAppCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, data), sizeof(uint8_t *) };
    r[i++]     = { offsetof(class Type, application), sizeof(/* TYPE WARNING: array array defaults to */ uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace LaunchAppResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, status), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, data), sizeof(uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}

namespace ContentLaunchCluster {
struct ClusterDescriptor ClusterDescriptor = { .ClusterId = kClusterId };
namespace LaunchContentCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, autoPlay), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, data), sizeof(uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace LaunchContentResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, data), sizeof(uint8_t *) };
    r[i++]     = { offsetof(class Type, contentLaunchStatus), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace LaunchURLCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, contentURL), sizeof(uint8_t *) };
    r[i++]     = { offsetof(class Type, displayString), sizeof(uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace LaunchURLResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, data), sizeof(uint8_t *) };
    r[i++]     = { offsetof(class Type, contentLaunchStatus), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}

namespace DoorLockCluster {
struct ClusterDescriptor ClusterDescriptor = { .ClusterId = kClusterId };
namespace LockDoorCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, PIN), sizeof(uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace LockDoorResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, status), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace UnlockDoorCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, PIN), sizeof(uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace UnlockDoorResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, status), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace ToggleCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, pin), sizeof(uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace ToggleResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, status), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace UnlockWithTimeoutCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, timeoutInSeconds), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, pin), sizeof(uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace UnlockWithTimeoutResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, status), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace GetLogRecordCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, logIndex), sizeof(uint16_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace GetLogRecordResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, logEntryId), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, timestamp), sizeof(uint32_t) };
    r[i++]     = { offsetof(class Type, eventType), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, source), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, eventIdOrAlarmCode), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, userId), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, pin), sizeof(uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace SetPinCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, userId), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, userStatus), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, userType), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, pin), sizeof(uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace SetPinResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, status), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace GetPinCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, userId), sizeof(uint16_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace GetPinResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, userId), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, userStatus), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, userType), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, pin), sizeof(uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace ClearPinCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, userId), sizeof(uint16_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace ClearPinResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, status), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace ClearAllPinsCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace ClearAllPinsResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, status), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace SetUserStatusCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, userId), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, userStatus), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace SetUserStatusResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, status), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace GetUserStatusCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, userId), sizeof(uint16_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace GetUserStatusResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, userId), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, status), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace SetWeekdayScheduleCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, scheduleId), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, userId), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, daysMask), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, startHour), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, startMinute), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, endHour), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, endMinute), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace SetWeekdayScheduleResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, status), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace GetWeekdayScheduleCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, scheduleId), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, userId), sizeof(uint16_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace GetWeekdayScheduleResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, scheduleId), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, userId), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, status), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, daysMask), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, startHour), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, startMinute), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, endHour), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, endMinute), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace ClearWeekdayScheduleCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, scheduleId), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, userId), sizeof(uint16_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace ClearWeekdayScheduleResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, status), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace SetYeardayScheduleCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, scheduleId), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, userId), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, localStartTime), sizeof(uint32_t) };
    r[i++]     = { offsetof(class Type, localEndTime), sizeof(uint32_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace SetYeardayScheduleResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, status), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace GetYeardayScheduleCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, scheduleId), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, userId), sizeof(uint16_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace GetYeardayScheduleResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, scheduleId), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, userId), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, status), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, localStartTime), sizeof(uint32_t) };
    r[i++]     = { offsetof(class Type, localEndTime), sizeof(uint32_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace ClearYeardayScheduleCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, scheduleId), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, userId), sizeof(uint16_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace ClearYeardayScheduleResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, status), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace SetHolidayScheduleCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, scheduleId), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, localStartTime), sizeof(uint32_t) };
    r[i++]     = { offsetof(class Type, localEndTime), sizeof(uint32_t) };
    r[i++]     = { offsetof(class Type, operatingModeDuringHoliday), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace SetHolidayScheduleResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, status), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace GetHolidayScheduleCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, scheduleId), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace GetHolidayScheduleResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, scheduleId), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, status), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, localStartTime), sizeof(uint32_t) };
    r[i++]     = { offsetof(class Type, localEndTime), sizeof(uint32_t) };
    r[i++]     = { offsetof(class Type, operatingModeDuringHoliday), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace ClearHolidayScheduleCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, scheduleId), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace ClearHolidayScheduleResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, status), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace SetUserTypeCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, userId), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, userType), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace SetUserTypeResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, status), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace GetUserTypeCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, userId), sizeof(uint16_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace GetUserTypeResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, userId), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, userType), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace SetRfidCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, userId), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, userStatus), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, userType), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, id), sizeof(uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace SetRfidResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, status), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace GetRfidCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, userId), sizeof(uint16_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace GetRfidResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, userId), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, userStatus), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, userType), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, rfid), sizeof(uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace ClearRfidCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, userId), sizeof(uint16_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace ClearRfidResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, status), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace ClearAllRfidsCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace ClearAllRfidsResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, status), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace OperationEventNotificationCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, source), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, eventCode), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, userId), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, pin), sizeof(uint8_t *) };
    r[i++]     = { offsetof(class Type, timeStamp), sizeof(uint32_t) };
    r[i++]     = { offsetof(class Type, data), sizeof(uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace ProgrammingEventNotificationCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, source), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, eventCode), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, userId), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, pin), sizeof(uint8_t *) };
    r[i++]     = { offsetof(class Type, userType), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, userStatus), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, timeStamp), sizeof(uint32_t) };
    r[i++]     = { offsetof(class Type, data), sizeof(uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}

namespace GeneralCommissioningCluster {
struct ClusterDescriptor ClusterDescriptor = { .ClusterId = kClusterId };
namespace ArmFailSafeCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, expiryLengthSeconds), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, breadcrumb), sizeof(uint64_t) };
    r[i++]     = { offsetof(class Type, timeoutMs), sizeof(uint32_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace ArmFailSafeResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, errorCode), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, debugText), sizeof(uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace SetRegulatoryConfigCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, location), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, countryCode), sizeof(uint8_t *) };
    r[i++]     = { offsetof(class Type, breadcrumb), sizeof(uint64_t) };
    r[i++]     = { offsetof(class Type, timeoutMs), sizeof(uint32_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace SetRegulatoryConfigResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, errorCode), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, debugText), sizeof(uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace CommissioningCompleteCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace CommissioningCompleteResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, errorCode), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, debugText), sizeof(uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}

namespace GroupsCluster {
struct ClusterDescriptor ClusterDescriptor = { .ClusterId = kClusterId };
namespace AddGroupCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, groupId), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, groupName), sizeof(uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace AddGroupResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, status), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, groupId), sizeof(uint16_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace ViewGroupCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, groupId), sizeof(uint16_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace ViewGroupResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, status), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, groupId), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, groupName), sizeof(uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace GetGroupMembershipCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, groupCount), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, groupList), sizeof(/* TYPE WARNING: array array defaults to */ uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace GetGroupMembershipResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, capacity), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, groupCount), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, groupList), sizeof(/* TYPE WARNING: array array defaults to */ uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace RemoveGroupCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, groupId), sizeof(uint16_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace RemoveGroupResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, status), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, groupId), sizeof(uint16_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace RemoveAllGroupsCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace AddGroupIfIdentifyingCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, groupId), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, groupName), sizeof(uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}

namespace IdentifyCluster {
struct ClusterDescriptor ClusterDescriptor = { .ClusterId = kClusterId };
namespace IdentifyCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, identifyTime), sizeof(uint16_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace IdentifyQueryResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, timeout), sizeof(uint16_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace IdentifyQueryCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace EZModeInvokeCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, action), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace UpdateCommissionStateCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, action), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, commissionStateMask), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace TriggerEffectCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, effectId), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, effectVariant), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}

namespace KeypadInputCluster {
struct ClusterDescriptor ClusterDescriptor = { .ClusterId = kClusterId };
namespace SendKeyCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, keyCode), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace SendKeyResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, status), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}

namespace MediaPlaybackCluster {
struct ClusterDescriptor ClusterDescriptor = { .ClusterId = kClusterId };
namespace MediaPlayCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace MediaPlayResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, mediaPlaybackStatus), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace MediaPauseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace MediaPauseResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, mediaPlaybackStatus), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace MediaStopCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace MediaStopResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, mediaPlaybackStatus), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace MediaStartOverCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace MediaStartOverResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, mediaPlaybackStatus), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace MediaPreviousCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace MediaPreviousResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, mediaPlaybackStatus), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace MediaNextCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace MediaNextResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, mediaPlaybackStatus), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace MediaRewindCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace MediaRewindResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, mediaPlaybackStatus), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace MediaFastForwardCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace MediaFastForwardResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, mediaPlaybackStatus), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace MediaSkipForwardCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, deltaPositionMilliseconds), sizeof(uint64_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace MediaSkipForwardResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, mediaPlaybackStatus), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace MediaSkipBackwardCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, deltaPositionMilliseconds), sizeof(uint64_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace MediaSkipBackwardResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, mediaPlaybackStatus), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace MediaSkipSeekCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, position), sizeof(uint64_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace MediaSkipSeekResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, mediaPlaybackStatus), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}

namespace NetworkCommissioningCluster {
struct ClusterDescriptor ClusterDescriptor = { .ClusterId = kClusterId };
namespace ScanNetworksCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, ssid), sizeof(chip::ByteSpan) };
    r[i++]     = { offsetof(class Type, breadcrumb), sizeof(uint64_t) };
    r[i++]     = { offsetof(class Type, timeoutMs), sizeof(uint32_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace ScanNetworksResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, errorCode), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, debugText), sizeof(uint8_t *) };
    r[i++]     = { offsetof(class Type, wifiScanResults), sizeof(/* TYPE WARNING: array array defaults to */ uint8_t *) };
    r[i++]     = { offsetof(class Type, threadScanResults), sizeof(/* TYPE WARNING: array array defaults to */ uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace AddWiFiNetworkCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, ssid), sizeof(chip::ByteSpan) };
    r[i++]     = { offsetof(class Type, credentials), sizeof(chip::ByteSpan) };
    r[i++]     = { offsetof(class Type, breadcrumb), sizeof(uint64_t) };
    r[i++]     = { offsetof(class Type, timeoutMs), sizeof(uint32_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace AddWiFiNetworkResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, errorCode), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, debugText), sizeof(uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace UpdateWiFiNetworkCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, ssid), sizeof(chip::ByteSpan) };
    r[i++]     = { offsetof(class Type, credentials), sizeof(chip::ByteSpan) };
    r[i++]     = { offsetof(class Type, breadcrumb), sizeof(uint64_t) };
    r[i++]     = { offsetof(class Type, timeoutMs), sizeof(uint32_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace UpdateWiFiNetworkResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, errorCode), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, debugText), sizeof(uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace AddThreadNetworkCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, operationalDataset), sizeof(chip::ByteSpan) };
    r[i++]     = { offsetof(class Type, breadcrumb), sizeof(uint64_t) };
    r[i++]     = { offsetof(class Type, timeoutMs), sizeof(uint32_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace AddThreadNetworkResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, errorCode), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, debugText), sizeof(uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace UpdateThreadNetworkCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, operationalDataset), sizeof(chip::ByteSpan) };
    r[i++]     = { offsetof(class Type, breadcrumb), sizeof(uint64_t) };
    r[i++]     = { offsetof(class Type, timeoutMs), sizeof(uint32_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace UpdateThreadNetworkResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, errorCode), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, debugText), sizeof(uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace RemoveNetworkCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, NetworkID), sizeof(chip::ByteSpan) };
    r[i++]     = { offsetof(class Type, Breadcrumb), sizeof(uint64_t) };
    r[i++]     = { offsetof(class Type, TimeoutMs), sizeof(uint32_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace RemoveNetworkResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, errorCode), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, debugText), sizeof(uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace EnableNetworkCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, networkID), sizeof(chip::ByteSpan) };
    r[i++]     = { offsetof(class Type, breadcrumb), sizeof(uint64_t) };
    r[i++]     = { offsetof(class Type, timeoutMs), sizeof(uint32_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace EnableNetworkResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, errorCode), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, debugText), sizeof(uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace DisableNetworkCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, networkID), sizeof(chip::ByteSpan) };
    r[i++]     = { offsetof(class Type, breadcrumb), sizeof(uint64_t) };
    r[i++]     = { offsetof(class Type, timeoutMs), sizeof(uint32_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace DisableNetworkResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, errorCode), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, debugText), sizeof(uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace GetLastNetworkCommissioningResultCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, timeoutMs), sizeof(uint32_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}

namespace OperationalCredentialsCluster {
struct ClusterDescriptor ClusterDescriptor = { .ClusterId = kClusterId };
namespace SetFabricCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, VendorId), sizeof(uint16_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace SetFabricResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, FabricId), sizeof(chip::FabricId) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace OpCSRRequestCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, CSRNonce), sizeof(chip::ByteSpan) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace OpCSRResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, CSR), sizeof(chip::ByteSpan) };
    r[i++]     = { offsetof(class Type, CSRNonce), sizeof(chip::ByteSpan) };
    r[i++]     = { offsetof(class Type, VendorReserved1), sizeof(chip::ByteSpan) };
    r[i++]     = { offsetof(class Type, VendorReserved2), sizeof(chip::ByteSpan) };
    r[i++]     = { offsetof(class Type, VendorReserved3), sizeof(chip::ByteSpan) };
    r[i++]     = { offsetof(class Type, Signature), sizeof(chip::ByteSpan) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace AddOpCertCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, NOC), sizeof(chip::ByteSpan) };
    r[i++]     = { offsetof(class Type, ICACertificate), sizeof(chip::ByteSpan) };
    r[i++]     = { offsetof(class Type, IPKValue), sizeof(chip::ByteSpan) };
    r[i++]     = { offsetof(class Type, CaseAdminNode), sizeof(chip::NodeId) };
    r[i++]     = { offsetof(class Type, AdminVendorId), sizeof(uint16_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace OpCertResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, StatusCode), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, FabricIndex), sizeof(uint64_t) };
    r[i++]     = { offsetof(class Type, DebugText), sizeof(uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace UpdateFabricLabelCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, Label), sizeof(uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace RemoveFabricCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, FabricId), sizeof(chip::FabricId) };
    r[i++]     = { offsetof(class Type, NodeId), sizeof(chip::NodeId) };
    r[i++]     = { offsetof(class Type, VendorId), sizeof(uint16_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace RemoveAllFabricsCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}

namespace ScenesCluster {
struct ClusterDescriptor ClusterDescriptor = { .ClusterId = kClusterId };
namespace AddSceneCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, groupId), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, sceneId), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, transitionTime), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, sceneName), sizeof(uint8_t *) };
    r[i++]     = { offsetof(class Type, extensionFieldSets), sizeof(/* TYPE WARNING: array array defaults to */ uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace AddSceneResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, status), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, groupId), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, sceneId), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace ViewSceneCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, groupId), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, sceneId), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace ViewSceneResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, status), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, groupId), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, sceneId), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, transitionTime), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, sceneName), sizeof(uint8_t *) };
    r[i++]     = { offsetof(class Type, extensionFieldSets), sizeof(/* TYPE WARNING: array array defaults to */ uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace RemoveSceneCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, groupId), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, sceneId), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace RemoveSceneResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, status), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, groupId), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, sceneId), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace RemoveAllScenesCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, groupId), sizeof(uint16_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace RemoveAllScenesResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, status), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, groupId), sizeof(uint16_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace StoreSceneCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, groupId), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, sceneId), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace StoreSceneResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, status), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, groupId), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, sceneId), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace RecallSceneCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, groupId), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, sceneId), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, transitionTime), sizeof(uint16_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace GetSceneMembershipCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, groupId), sizeof(uint16_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace GetSceneMembershipResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, status), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, capacity), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, groupId), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, sceneCount), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, sceneList), sizeof(/* TYPE WARNING: array array defaults to */ uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace EnhancedAddSceneCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, groupId), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, sceneId), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, transitionTime), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, sceneName), sizeof(uint8_t *) };
    r[i++]     = { offsetof(class Type, extensionFieldSets), sizeof(/* TYPE WARNING: array array defaults to */ uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace EnhancedAddSceneResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, status), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, groupId), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, sceneId), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace EnhancedViewSceneCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, groupId), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, sceneId), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace EnhancedViewSceneResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, status), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, groupId), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, sceneId), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, transitionTime), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, sceneName), sizeof(uint8_t *) };
    r[i++]     = { offsetof(class Type, extensionFieldSets), sizeof(/* TYPE WARNING: array array defaults to */ uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace CopySceneCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, mode), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, groupIdFrom), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, sceneIdFrom), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, groupIdTo), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, sceneIdTo), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace CopySceneResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, status), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, groupIdFrom), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, sceneIdFrom), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}

namespace TvChannelCluster {
struct ClusterDescriptor ClusterDescriptor = { .ClusterId = kClusterId };
namespace ChangeChannelCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, match), sizeof(uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace ChangeChannelResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, ChannelMatch), sizeof(/* TYPE WARNING: array array defaults to */ uint8_t *) };
    r[i++]     = { offsetof(class Type, ErrorType), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace ChangeChannelByNumberCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, majorNumber), sizeof(uint16_t) };
    r[i++]     = { offsetof(class Type, minorNumber), sizeof(uint16_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace SkipChannelCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, Count), sizeof(uint16_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}

namespace TargetNavigatorCluster {
struct ClusterDescriptor ClusterDescriptor = { .ClusterId = kClusterId };
namespace NavigateTargetCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, target), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, data), sizeof(uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace NavigateTargetResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, status), sizeof(uint8_t) };
    r[i++]     = { offsetof(class Type, data), sizeof(uint8_t *) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}

namespace TestClusterCluster {
struct ClusterDescriptor ClusterDescriptor = { .ClusterId = kClusterId };
namespace TestCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace TestSpecificResponseCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    r[i++]     = { offsetof(class Type, returnValue), sizeof(uint8_t) };
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace TestNotHandledCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}
namespace TestSpecificCommand {
constexpr std::array<TypeOffsetInfo, NumImplementedFields> InitializeOffsets()
{
    std::array<TypeOffsetInfo, NumImplementedFields> r = {};

    uint32_t i = 0;
    return r;
}

constexpr std::array<TypeOffsetInfo, NumImplementedFields> Offsets = InitializeOffsets();

const StructDescriptor<NumImplementedFields> Descriptor = {
    .FieldList = PopulateFieldDescriptors<NumImplementedFields, std::size(_Schema)>(_Schema, Offsets)
};

const StructDescriptor<NumImplementedFields> & Type::mDescriptor = Descriptor;
}

} // namespace clusters
} // namespace app
} // namespace chip
